import asyncio
import logging
import threading
import json
import os
import requests
import time
import random
import string
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

# –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è
app = Flask(__name__)

@app.route('/')
def home():
    return "üîç Username Hunter Bot —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ"

@app.route('/status')
def status():
    return {"status": "active", "bot": "username_hunter_bot"}

@app.route('/ping')
def ping():
    return {"ping": "pong", "time": time.time()}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def keep_alive():
    while True:
        try:
            # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π URL Render –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
            requests.get("https://your-app-name.onrender.com/ping", timeout=10)
        except:
            pass
        time.sleep(300)  # –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

def run_flask():
    app.run(host='0.0.0.0', port=5000)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_ID = 6174872743
BOT_TOKEN = "8057236237:AAFhHS9eOuyyTzd71t-H2cxB4pYPbv4d21M"
CHANNEL_ID = -1002869714443

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
search_active = False
search_task = None

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —é–∑–µ—Ä–Ω–µ–π–º–æ–≤
def generate_pattern_usernames():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –∏ —Å–∏–º–º–µ—Ç—Ä–∏–µ–π"""
    patterns = []
    letters = string.ascii_lowercase
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ (5 —Å–∏–º–≤–æ–ª–æ–≤)
    for _ in range(20):
        char1 = random.choice(letters)
        char2 = random.choice(letters)
        char3 = random.choice(letters)
        
        # –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        pattern_types = [
            char1 + char2 + char1 + char2 + char1,  # ababa
            char1 + char1 + char2 + char2 + char2,  # aabbb  
            char1 + char2 + char2 + char2 + char1,  # abbba
            char1 + char1 + char2 + char1 + char1,  # aabaa
            char1 + char2 + char3 + char3 + char3,  # abccc
            char1 + char1 + char1 + char2 + char2,  # aaabb
            char1 + char2 + char1 + char1 + char1,  # abaaa
            char1 + char1 + char2 + char2 + char1,  # aabba
        ]
        
        patterns.extend(random.sample(pattern_types, 3))
    
    # –ü–∞–ª–∏–Ω–¥—Ä–æ–º—ã (5 —Å–∏–º–≤–æ–ª–æ–≤)
    for _ in range(15):
        char1 = random.choice(letters)
        char2 = random.choice(letters)
        char3 = random.choice(letters)
        
        palindrome_types = [
            char1 + char2 + char3 + char2 + char1,  # abcba
            char1 + char1 + char2 + char1 + char1,  # aabaa
            char1 + char2 + char2 + char2 + char1,  # abbba
            char1 + char1 + char1 + char1 + char1,  # aaaaa
        ]
        
        patterns.extend(random.sample(palindrome_types, 2))
    
    # –ß–∏—Å–ª–∞ –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
    for _ in range(10):
        char = random.choice(letters)
        num = random.choice('0123456789')
        
        number_patterns = [
            char + num + char + num + char,  # a1a1a
            char + char + num + char + char,  # aa1aa
            char + num + num + num + char,   # a111a
            char + char + char + num + num,  # aaa11
            char + num + char + char + char, # a1aaa
        ]
        
        patterns.extend(random.sample(number_patterns, 2))
    
    return patterns

def generate_meme_usernames():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–º–Ω—ã–µ –∏ —ç—Å—Ç–µ—Ç–∏—á–Ω—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã"""
    # –ë–∞–∑–æ–≤—ã–µ –º–µ–º–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    meme_bases = ["slay", "drip", "base", "ezw", "xdd", "sus", "npc", "sig", "cring", "pog", "kek", "omg", "lmao", "bro", "yik", "okay", "vibe", "mood", "fact", "true", "real", "dead", "fire", "icy", "hot", "cool", "epic", "lic", "lit", "bust", "thic", "chon"]
    
    # –û–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è —É–¥–ª–∏–Ω–µ–Ω–∏—è
    endings = ["y", "yy", "yyy", "z", "zz", "x", "xx", "d", "dd", "s", "ss", "e", "ee", "g", "gg", "p", "pp", "w", "ww", "t", "tt", "n", "nn", "c", "cc", "k", "kk", "l", "ll", "m", "mm", "r", "rr"]
    
    variations = []
    for _ in range(30):
        base = random.choice(meme_bases)
        ending = random.choice(endings)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–æ –¥–ª–∏–Ω–æ–π 5+ —Å–∏–º–≤–æ–ª–æ–≤
        if len(base) >= 5:
            variations.append(base[:5])
        elif len(base) == 4:
            variations.append(base + ending[0])
        elif len(base) == 3:
            variations.append(base + ending)
        else:
            variations.append(base + ending + random.choice('xyz'))
    
    return variations

def generate_english_russian_usernames():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–µ"""
    # –†—É—Å—Å–∫–∏–µ –∫–æ—Ä–Ω–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    russian_roots = [
        "si", "vz", "ot", "ub", "po", "zn", "mo", "ho", "bu", "de", "id", "ed", "le", "be", "po", "ta", "ig", "ch", "pi", "go", "sl", "vi", "sm", "pl", "kr"
    ]
    
    # –û–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–µ
    endings = ["al", "el", "il", "ol", "ul", "aj", "ej", "ij", "oj", "uj", "an", "en", "in", "on", "un", "at", "et", "it", "ot", "ut", "ay", "ey", "iy", "oy", "uy", "sh", "ch", "th", "ph", "kh"]
    
    variations = []
    for _ in range(25):
        root = random.choice(russian_roots)
        ending = random.choice(endings)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–æ 5+ —Å–∏–º–≤–æ–ª–æ–≤
        word = root + ending
        if len(word) >= 5:
            variations.append(word[:6])  # –ú–∞–∫—Å–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤
        else:
            variations.append(word + random.choice('l'))
    
    return variations

def generate_brand_usernames():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±—Ä–µ–Ω–¥—ã –∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    # –ß–∞—Å—Ç–∏ –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    brand_parts = [
        "app", "guc", "dio", "tes", "nvi", "tik", "dis", "net", "spo", "chr", "xbo", "ste", "twi", "red", "git", "goo", "ama", "pay", "mas", "vis", "mcd", "kfc", "piz", "coc", "pep", "sta", "mer", "bmw", "aud", "toy"
    ]
    
    # –û–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤
    brand_endings = ["le", "ci", "or", "la", "dia", "tok", "ord", "flix", "ify", "ome", "xx", "am", "ch", "dit", "hub", "gle", "zon", "pal", "ter", "sa", "ks", "za", "ola", "si", "ks", "des", "w", "di", "ta"]
    
    variations = []
    for _ in range(25):
        part = random.choice(brand_parts)
        ending = random.choice(brand_endings)
        
        # –°–æ–∑–¥–∞–µ–º –±—Ä–µ–Ω–¥ 5+ —Å–∏–º–≤–æ–ª–æ–≤
        brand = part + ending
        if len(brand) >= 5:
            variations.append(brand[:7])  # –ú–∞–∫—Å–∏–º—É–º 7 —Å–∏–º–≤–æ–ª–æ–≤
        else:
            variations.append(brand + random.choice('xy'))
    
    return variations

def generate_all_usernames():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–∏–ø—ã —é–∑–µ—Ä–Ω–µ–π–º–æ–≤"""
    all_usernames = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã
    all_usernames.extend(generate_pattern_usernames())
    all_usernames.extend(generate_meme_usernames()) 
    all_usernames.extend(generate_english_russian_usernames())
    all_usernames.extend(generate_brand_usernames())
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã
    all_usernames.extend(generate_random_combinations())
    all_usernames.extend(generate_aesthetic_usernames())
    all_usernames.extend(generate_gaming_usernames())
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    unique_usernames = list(set(all_usernames))
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ (5+ —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±—É–∫–≤—ã)
    valid_usernames = []
    for username in unique_usernames:
        if len(username) >= 5 and username[0].isalpha() and username.isalnum():
            valid_usernames.append(username)
    
    return valid_usernames

def generate_random_combinations():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä"""
    combinations = []
    letters = string.ascii_lowercase
    
    for _ in range(20):
        # –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ 5-6 —Å–∏–º–≤–æ–ª–æ–≤
        combo_types = [
            # –ë—É–∫–≤–∞ + —Ü–∏—Ñ—Ä—ã + –±—É–∫–≤–∞
            random.choice(letters) + str(random.randint(100, 999)) + random.choice(letters),
            # –î–≤–µ –±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã + –±—É–∫–≤–∞
            random.choice(letters) + random.choice(letters) + str(random.randint(10, 99)) + random.choice(letters),
            # –ë—É–∫–≤–∞ + —Ü–∏—Ñ—Ä–∞ + –±—É–∫–≤—ã
            random.choice(letters) + str(random.randint(1, 9)) + ''.join(random.choices(letters, k=3)),
            # –ë—É–∫–≤—ã + —Ü–∏—Ñ—Ä–∞ –≤ –∫–æ–Ω—Ü–µ
            ''.join(random.choices(letters, k=4)) + str(random.randint(1, 9)),
            # –¶–∏—Ñ—Ä–∞ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
            ''.join(random.choices(letters, k=2)) + str(random.randint(1, 9)) + ''.join(random.choices(letters, k=2)),
        ]
        
        combinations.extend(random.sample(combo_types, 2))
    
    return combinations

def generate_aesthetic_usernames():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç—Å—Ç–µ—Ç–∏—á–Ω—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã"""
    aesthetics = []
    
    # –ö—Ä–∞—Å–∏–≤—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –∑–≤—É–∫–æ–≤
    beautiful_sounds = ["ae", "ai", "ao", "au", "ea", "ei", "eo", "eu", "ia", "ie", "io", "iu", "oa", "oe", "oi", "ou", "ua", "ue", "ui", "uo"]
    consonants = ["b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p", "q", "r", "s", "t", "v", "w", "x", "z"]
    
    for _ in range(20):
        # –ö—Ä–∞—Å–∏–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        sound = random.choice(beautiful_sounds)
        cons1 = random.choice(consonants)
        cons2 = random.choice(consonants)
        
        aesthetic_types = [
            cons1 + sound + cons2,  # bael
            sound + cons1 + cons2,  # aelb
            cons1 + sound + sound,  # baeae
            sound + cons1 + sound,  # aelae
            cons1 + cons2 + sound,  # blae
        ]
        
        for aesthetic in aesthetic_types:
            if len(aesthetic) >= 5:
                aesthetics.append(aesthetic[:6])
            else:
                aesthetics.append(aesthetic + random.choice(consonants))
    
    return aesthetics

def generate_gaming_usernames():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–µ–π–º–µ—Ä—Å–∫–∏–µ —é–∑–µ—Ä–Ω–µ–π–º—ã"""
    gaming = []
    
    # –ì–µ–π–º–µ—Ä—Å–∫–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏ —Å—É—Ñ—Ñ–∏–∫—Å—ã
    prefixes = ["pro", "god", "max", "top", "ace", "neo", "dark", "fire", "ice", "storm", "void", "rage", "epic", "mega", "ultra", "super", "hyper", "elite", "alpha", "beta", "gamma", "delta", "omega"]
    suffixes = ["x", "z", "er", "ly", "fy", "ty", "ry", "ny", "my", "ky", "py", "by", "gy", "dy", "wy", "sy", "cy", "vy", "hy", "jy"]
    
    for _ in range(15):
        prefix = random.choice(prefixes)
        suffix = random.choice(suffixes)
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–π–º–µ—Ä—Å–∫–∏–µ –Ω–∏–∫–∏
        gaming_types = [
            prefix + suffix,  # prox
            prefix + str(random.randint(1, 99)),  # pro99
            prefix[:2] + suffix + str(random.randint(1, 9)),  # prox9
            prefix + random.choice('xyz'),  # prox
        ]
        
        for game_nick in gaming_types:
            if len(game_nick) >= 5:
                gaming.append(game_nick[:7])
    
    return gaming

async def check_username_availability(username):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –ø–æ username
        chat = await bot.get_chat(f"@{username}")
        return False  # –ï—Å–ª–∏ —á–∞—Ç –Ω–∞–π–¥–µ–Ω, –∑–Ω–∞—á–∏—Ç username –∑–∞–Ω—è—Ç
    except TelegramBadRequest:
        return True  # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, username —Å–≤–æ–±–æ–¥–µ–Ω
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ username {username}: {e}")
        return False

async def search_usernames():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤"""
    global search_active
    
    while search_active:
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞—Ç—á —é–∑–µ—Ä–Ω–µ–π–º–æ–≤
            usernames = generate_all_usernames()
            random.shuffle(usernames)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π username
            for username in usernames[:50]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ 50 –∑–∞ —Ä–∞–∑
                if not search_active:
                    break
                    
                is_available = await check_username_availability(username)
                
                if is_available:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π username –∞–¥–º–∏–Ω—É
                    await send_username_to_admin(username)
                    
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å rate limit
                await asyncio.sleep(2)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            await asyncio.sleep(10)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–∏—Å–∫–µ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤: {e}")
            await asyncio.sleep(30)

async def send_username_to_admin(username):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π username –∞–¥–º–∏–Ω—É"""
    try:
        text = f"""üéØ –ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º: @{username}
üëá –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ—Å—Ç–∞–≤–∏—Ç—å", callback_data=f"set_{username}"),
                InlineKeyboardButton(text="‚ùå –ù–µ —Å—Ç–∞–≤–∏—Ç—å", callback_data=f"skip_{username}")
            ]
        ])
        
        await bot.send_message(ADMIN_ID, text, reply_markup=keyboard)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ username –∞–¥–º–∏–Ω—É: {e}")

async def set_channel_username(username):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç username –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
    try:
        await bot.set_chat_username(CHANNEL_ID, username)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ username {username}: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

@dp.message(Command("start"))
async def start_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    start_text = """üîç <b>Username Hunter Bot</b>

üéØ <b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /search_start - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤
‚Ä¢ /search_stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫
‚Ä¢ /search_status - –°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞
‚Ä¢ /generate - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —é–∑–µ—Ä–Ω–µ–π–º–æ–≤

<b>–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö —Ç–µ–±–µ!</b>"""
    
    await message.reply(start_text, parse_mode="HTML")

@dp.message(Command("search_start"))
async def search_start_handler(message: Message):
    global search_active, search_task
    
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    if search_active:
        await message.reply("‚ö†Ô∏è –ü–æ–∏—Å–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        return
    
    search_active = True
    search_task = asyncio.create_task(search_usernames())
    
    await message.reply("üöÄ <b>–ü–æ–∏—Å–∫ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –∑–∞–ø—É—â–µ–Ω!</b>\n\n–ë–æ—Ç –Ω–∞—á–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ—Ç —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ - –ø—Ä–∏—à–ª–µ—Ç —Ç–µ–±–µ!", parse_mode="HTML")

@dp.message(Command("search_stop"))
async def search_stop_handler(message: Message):
    global search_active, search_task
    
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    if not search_active:
        await message.reply("‚ö†Ô∏è –ü–æ–∏—Å–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
        return
    
    search_active = False
    if search_task:
        search_task.cancel()
    
    await message.reply("‚èπÔ∏è <b>–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>", parse_mode="HTML")

@dp.message(Command("search_status"))
async def search_status_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if search_active else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    await message.reply(f"üìä <b>–°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞:</b> {status}", parse_mode="HTML")

@dp.message(Command("generate"))
async def generate_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
    patterns = generate_pattern_usernames()[:8]
    memes = generate_meme_usernames()[:8]
    russian = generate_english_russian_usernames()[:8]
    brands = generate_brand_usernames()[:8]
    combinations = generate_random_combinations()[:8]
    aesthetics = generate_aesthetic_usernames()[:8]
    gaming = generate_gaming_usernames()[:8]
    
    text = f"""üé≤ <b>–ü—Ä–∏–º–µ—Ä—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤:</b>

üîÑ <b>–ü–∞—Ç—Ç–µ—Ä–Ω—ã:</b>
{', '.join(patterns)}

üòé <b>–ú–µ–º—ã:</b>
{', '.join(memes)}

üá∑üá∫ <b>–†—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞:</b>
{', '.join(russian)}

üè∑Ô∏è <b>–ë—Ä–µ–Ω–¥—ã:</b>
{', '.join(brands)}

üéØ <b>–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏:</b>
{', '.join(combinations)}

‚ú® <b>–≠—Å—Ç–µ—Ç–∏—á–Ω—ã–µ:</b>
{', '.join(aesthetics)}

üéÆ <b>–ì–µ–π–º–µ—Ä—Å–∫–∏–µ:</b>
{', '.join(gaming)}

<i>–í—Å–µ–≥–æ —Ç–∏–ø–æ–≤: 7. –ö–∞–∂–¥—ã–π –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã!</i>"""
    
    await message.reply(text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫

@dp.callback_query(lambda c: c.data.startswith("set_"))
async def set_username_callback(callback_query: CallbackQuery):
    username = callback_query.data.replace("set_", "")
    
    await callback_query.message.edit_text(f"‚è≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é username @{username}...")
    
    success = await set_channel_username(username)
    
    if success:
        await callback_query.message.edit_text(f"‚úÖ <b>Username @{username} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>", parse_mode="HTML")
    else:
        await callback_query.message.edit_text(f"‚ùå <b>–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ @{username}</b>\n\n–í–æ–∑–º–æ–∂–Ω–æ username —É–∂–µ –∑–∞–Ω—è—Ç –∏–ª–∏ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.", parse_mode="HTML")
    
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith("skip_"))
async def skip_username_callback(callback_query: CallbackQuery):
    username = callback_query.data.replace("skip_", "")
    
    await callback_query.message.edit_text(f"‚è≠Ô∏è Username @{username} –ø—Ä–æ–ø—É—â–µ–Ω")
    await callback_query.answer()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    print("üîç Username Hunter Bot –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫ keep-alive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    keep_alive_thread = threading.Thread(target=keep_alive)
    keep_alive_thread.daemon = True
    keep_alive_thread.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(main())
